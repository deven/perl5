#> This file produced from Descrip.MMS by mms2make.pl
#> Lines beginning with "#>" were commented out during the
#> conversion process.  For more information, see mms2make.pl
#>
# Makefile. for perl5 on VMS
# Last revised 27-Aug-1994 by Charles Bailey  bailey@genetics.upenn.edu
#
#
#	tidy      -- purge files generated by executing this file
#	clean     -- remove all files generated by executing this file
#	cleansrc  -- `clean' + purge *.c,*.h,descrip.mms
#	gcc_cld_setup -- GCC initialization; see above
#	crtl.opt  -- compiler-specific linker options file (made automatically)
#

#### Start of system configuration section. ####

O = .obj    # File type to use for object files
E = .exe    # File type to use for executable images

# used to incorporate 'custom' malloc routines
mallocsrc =
mallocobj =

.first
	@ If F$TrnLnm("Sys").eqs."" Then Define/NoLog SYS Sys$Library
XTRAOBJS = 
LIBS1 = $(XTRAOBJS)
XTRACCFLAGS = /Include=[]
LIBS2 = Sys$Share:VAXCRTL.Exe/Shareable

DBGCCFLAGS = /NoList
DBGLINKFLAGS = /NoMap
DBG = 

CFLAGS = /Define=(HAVE_CONFIG_H)$(XTRACCFLAGS)$(DBGCCFLAGS)
LINKFLAGS = $(DBGLINKFLAGS)

MAKEFILE = [.VMS]Makefile.   # this file
NOOP = continue

# List of extensions to build into perlmain; enclose each in quotes and
# separate by spaces
EXT = "DynaLoader"
# Source and object files for these extensions; leading comma is required
extobj = , [.ext.dynaloader]dl_vms.obj

#### End of system configuration section. ####


h1 = EXTERN.h, INTERN.h, XSUB.h, av.h, config.h, cop.h, cv.h, dosish.h 
h2 = embed.h, form.h, gv.h, handy.h, hv.h, keywords.h, mg.h, op.h
h3 = opcode.h, patchlevel.h, perl.h, perly.h, pp.h, proto.h, regcomp.h
h4 = regexp.h, scope.h, sv.h, vmsish.h, util.h
h = $(h1), $(h2), $(h3), $(h4)

c1 = av.c, scope.c, op.c, doop.c, doio.c, dump.c, hv.c $(mallocsrc)
c2 = mg.c, perly.c, pp.c, pp_ctl.c, pp_hot.c, pp_sys.c, regcomp.c, regexec.c
c3 = gv.c, sv.c, taint.c, toke.c, util.c, deb.c, run.c, vms.c

c = $(c1), $(c2), $(c3), miniperlmain.c, perlmain.c

obj1 = av$(O), scope$(O), op$(O), doop$(O), doio$(O), dump$(O), hv$(O) $(mallocobj)
obj2 = mg$(O), perly$(O), pp$(O), pp_ctl$(O), pp_hot$(O), pp_sys$(O), regcomp$(O), regexec$(O)
obj3 = gv$(O), sv$(O), taint$(O), toke$(O), util$(O), deb$(O), run$(O), vms$(O)

obj = $(obj1), $(obj2), $(obj3)

CRTL = []crtl.opt
CRTLOPTS =,$(CRTL)/Options

.SUFFIXES
.SUFFIXES $(O) .c

.c$(O) :
	$(CC) $(CFLAGS) &<

all : base extras
	@ $(NOOP)
base : miniperl$(E) perl$(E) [.lib]Config.pm 
	@ $(NOOP)
extras : [.lib]DynaLoader.pm libperl.olb
	@ $(NOOP)

miniperl_objs = miniperlmain$(O), perl$(O), $(obj)
miniperl$(E) :  $(miniperl_objs) $(CRTL)
	Link $(LINKFLAGS)/Exe=$(DBG)&@ $(miniperl_objs) $(CRTLOPTS)

perlmain.c : miniperlmain.c
	- MCR Sys$Disk:[]Miniperl$(E) [.VMS]Writemain.pl $(EXT)

perl_objs = perlmain$(O), perl$(O), $(obj) $(extobj)
perl$(E) :  $(perl_objs) $(CRTL)
	Link $(LINKFLAGS)/Exe=$(DBG)&@ $(perl_objs) $(CRTLOPTS)

[.lib]config.pm : [.vms]config.vms [.vms]genconfig.pl
	- MCR Sys$Disk:[]Miniperl$(E) [.VMS]GenConfig.Pl
	- MCR Sys$Disk:[]Miniperl$(E) ConfigPM.

[.ext.dynaloader]dl_vms.c : [.ext.dynaloader]dl_vms.xs
	Set Default [.ext.dynaloader]
	- MCR Sys$Disk:[--]Miniperl$(E) [-]xsubpp dl_vms.xs >dl_vms.c
	Set Default [--]

[.ext.dynaloader]dl_vms.obj : [.ext.dynaloader]dl_vms.c
	$(CC) $(CFLAGS) /Object=&@ &<

[.lib]DynaLoader.pm : [.vms]patch_Dyna.pl [.ext.dynaloader]dynaloader.pm
	- MCR Sys$Disk:[]Miniperl$(E) [.vms]patch_Dyna.pl [.ext.dynaloader]dynaloader.pm [.lib]DynaLoader.pm 

olb_objs = perl$(O), $(obj)
libperl.olb : $(olb_objs)
	If F$Search("&@").eqs."" Then Library/Create $(MMS$TARGET)
	Library/Object/Replace &@ $(olb_objs)

# This version, if specified in Configure, does ONLY those scripts which need
# set-id emulation.  Suidperl must be setuid root.  It contains the "taint"
# checks as well as the special code to validate that the script in question
# has been invoked correctly.

suidperl_objs = sperl$(O), perlmain$(O)
suidperl$(E) :  $(suidperl_objs), libperl.olb $(CRTL)
	Link $(LINKFLAGS)/Exe=&@ $(suidperl_objs), -
	libperl.olb/Library $(CRTLOPTS)

sperl$(O) : perl.c perly.h patchlevel.h $(h)
	Delete/Log/NoConfirm sperl.c;*
	Copy/Log/NoConfirm perl.c sperl.c
	$(CC) $(CFLAGS)/Define=(IAMSUID) sperl.c
	Delete/Log/NoConfirm sperl.c;*

#opcode.h : opcode.pl
#	- MCR Sys$Disk:[]Miniperl$(E) opcode.pl

perly.h : perly.c                   # Quick and dirty 'touch'
	Copy/Log/NoConfirm perly.h; ;
	Delete/Log/NoConfirm perly.h;-1

# I now supply perly.c with the kits, so the following section is
# commented out if you don't have byacc.

# perly.c:
# 	@ echo 'Expect' 80 shift/reduce and 62 reduce/reduce conflicts
# 	\$(BYACC) -d perly.y
# 	sh \$(shellflags) ./perly.fixer y.tab.c perly.c
# 	mv y.tab.h perly.h
# 	echo 'extern YYSTYPE yylval;' >>perly.h

perly$(O) : perly.c, perly.h, $(h)
	$(CC) $(CFLAGS) &<

test : perl$(E) [.lib]Config.pm
	- Set Default [.t]
	- Delete/Log/NoConfirm perl$(E);*
	- Copy/Log/NoConfirm [-]Perl$(E) []
	- MCR Sys$Disk:[]Perl$(E) TEST

# AUTOMATICALLY GENERATED MAKE DEPENDENCIES--PUT NOTHING BELOW THIS LINE
# If this runs make out of memory, delete /usr/include lines.
av$(O) : EXTERN.h
av$(O) : av.c
av$(O) : av.h
av$(O) : config.h
av$(O) : cop.h
av$(O) : cv.h
av$(O) : embed.h
av$(O) : form.h
av$(O) : gv.h
av$(O) : handy.h
av$(O) : hv.h
av$(O) : mg.h
av$(O) : op.h
av$(O) : opcode.h
av$(O) : perl.h
av$(O) : pp.h
av$(O) : proto.h
av$(O) : regexp.h
av$(O) : scope.h
av$(O) : sv.h
av$(O) : vmsish.h
av$(O) : util.h
scope$(O) : EXTERN.h
scope$(O) : av.h
scope$(O) : config.h
scope$(O) : cop.h
scope$(O) : cv.h
scope$(O) : embed.h
scope$(O) : form.h
scope$(O) : gv.h
scope$(O) : handy.h
scope$(O) : hv.h
scope$(O) : mg.h
scope$(O) : op.h
scope$(O) : opcode.h
scope$(O) : perl.h
scope$(O) : pp.h
scope$(O) : proto.h
scope$(O) : regexp.h
scope$(O) : scope.c
scope$(O) : scope.h
scope$(O) : sv.h
scope$(O) : vmsish.h
scope$(O) : util.h
op$(O) : EXTERN.h
op$(O) : av.h
op$(O) : config.h
op$(O) : cop.h
op$(O) : cv.h
op$(O) : embed.h
op$(O) : form.h
op$(O) : gv.h
op$(O) : handy.h
op$(O) : hv.h
op$(O) : mg.h
op$(O) : op.c
op$(O) : op.h
op$(O) : opcode.h
op$(O) : perl.h
op$(O) : pp.h
op$(O) : proto.h
op$(O) : regexp.h
op$(O) : scope.h
op$(O) : sv.h
op$(O) : vmsish.h
op$(O) : util.h
doop$(O) : EXTERN.h
doop$(O) : av.h
doop$(O) : config.h
doop$(O) : cop.h
doop$(O) : cv.h
doop$(O) : doop.c
doop$(O) : embed.h
doop$(O) : form.h
doop$(O) : gv.h
doop$(O) : handy.h
doop$(O) : hv.h
doop$(O) : mg.h
doop$(O) : op.h
doop$(O) : opcode.h
doop$(O) : perl.h
doop$(O) : pp.h
doop$(O) : proto.h
doop$(O) : regexp.h
doop$(O) : scope.h
doop$(O) : sv.h
doop$(O) : vmsish.h
doop$(O) : util.h
doio$(O) : EXTERN.h
doio$(O) : av.h
doio$(O) : config.h
doio$(O) : cop.h
doio$(O) : cv.h
doio$(O) : doio.c
doio$(O) : embed.h
doio$(O) : form.h
doio$(O) : gv.h
doio$(O) : handy.h
doio$(O) : hv.h
doio$(O) : mg.h
doio$(O) : op.h
doio$(O) : opcode.h
doio$(O) : perl.h
doio$(O) : pp.h
doio$(O) : proto.h
doio$(O) : regexp.h
doio$(O) : scope.h
doio$(O) : sv.h
doio$(O) : vmsish.h
doio$(O) : util.h
dump$(O) : EXTERN.h
dump$(O) : av.h
dump$(O) : config.h
dump$(O) : cop.h
dump$(O) : cv.h
dump$(O) : dump.c
dump$(O) : embed.h
dump$(O) : form.h
dump$(O) : gv.h
dump$(O) : handy.h
dump$(O) : hv.h
dump$(O) : mg.h
dump$(O) : op.h
dump$(O) : opcode.h
dump$(O) : perl.h
dump$(O) : pp.h
dump$(O) : proto.h
dump$(O) : regexp.h
dump$(O) : scope.h
dump$(O) : sv.h
dump$(O) : vmsish.h
dump$(O) : util.h
hv$(O) : EXTERN.h
hv$(O) : av.h
hv$(O) : config.h
hv$(O) : cop.h
hv$(O) : cv.h
hv$(O) : embed.h
hv$(O) : form.h
hv$(O) : gv.h
hv$(O) : handy.h
hv$(O) : hv.c
hv$(O) : hv.h
hv$(O) : mg.h
hv$(O) : op.h
hv$(O) : opcode.h
hv$(O) : perl.h
hv$(O) : pp.h
hv$(O) : proto.h
hv$(O) : regexp.h
hv$(O) : scope.h
hv$(O) : sv.h
hv$(O) : vmsish.h
hv$(O) : util.h
malloc$(O) : EXTERN.h
malloc$(O) : av.h
malloc$(O) : config.h
malloc$(O) : cop.h
malloc$(O) : cv.h
malloc$(O) : embed.h
malloc$(O) : form.h
malloc$(O) : gv.h
malloc$(O) : handy.h
malloc$(O) : hv.h
malloc$(O) : malloc.c
malloc$(O) : mg.h
malloc$(O) : op.h
malloc$(O) : opcode.h
malloc$(O) : perl.h
malloc$(O) : pp.h
malloc$(O) : proto.h
malloc$(O) : regexp.h
malloc$(O) : scope.h
malloc$(O) : sv.h
malloc$(O) : vmsish.h
malloc$(O) : util.h
mg$(O) : EXTERN.h
mg$(O) : av.h
mg$(O) : config.h
mg$(O) : cop.h
mg$(O) : cv.h
mg$(O) : embed.h
mg$(O) : form.h
mg$(O) : gv.h
mg$(O) : handy.h
mg$(O) : hv.h
mg$(O) : mg.c
mg$(O) : mg.h
mg$(O) : op.h
mg$(O) : opcode.h
mg$(O) : perl.h
mg$(O) : pp.h
mg$(O) : proto.h
mg$(O) : regexp.h
mg$(O) : scope.h
mg$(O) : sv.h
mg$(O) : vmsish.h
mg$(O) : util.h
perly$(O) : EXTERN.h
perly$(O) : av.h
perly$(O) : config.h
perly$(O) : cop.h
perly$(O) : cv.h
perly$(O) : embed.h
perly$(O) : form.h
perly$(O) : gv.h
perly$(O) : handy.h
perly$(O) : hv.h
perly$(O) : mg.h
perly$(O) : op.h
perly$(O) : opcode.h
perly$(O) : perl.h
perly$(O) : perly.c
perly$(O) : pp.h
perly$(O) : proto.h
perly$(O) : regexp.h
perly$(O) : scope.h
perly$(O) : sv.h
perly$(O) : vmsish.h
perly$(O) : util.h
pp$(O) : EXTERN.h
pp$(O) : av.h
pp$(O) : config.h
pp$(O) : cop.h
pp$(O) : cv.h
pp$(O) : embed.h
pp$(O) : form.h
pp$(O) : gv.h
pp$(O) : handy.h
pp$(O) : hv.h
pp$(O) : mg.h
pp$(O) : op.h
pp$(O) : opcode.h
pp$(O) : perl.h
pp$(O) : pp.c
pp$(O) : pp.h
pp$(O) : proto.h
pp$(O) : regexp.h
pp$(O) : scope.h
pp$(O) : sv.h
pp$(O) : vmsish.h
pp$(O) : util.h
regcomp$(O) : EXTERN.h
regcomp$(O) : INTERN.h
regcomp$(O) : av.h
regcomp$(O) : config.h
regcomp$(O) : cop.h
regcomp$(O) : cv.h
regcomp$(O) : embed.h
regcomp$(O) : form.h
regcomp$(O) : gv.h
regcomp$(O) : handy.h
regcomp$(O) : hv.h
regcomp$(O) : mg.h
regcomp$(O) : op.h
regcomp$(O) : opcode.h
regcomp$(O) : perl.h
regcomp$(O) : pp.h
regcomp$(O) : proto.h
regcomp$(O) : regcomp.c
regcomp$(O) : regcomp.h
regcomp$(O) : regexp.h
regcomp$(O) : scope.h
regcomp$(O) : sv.h
regcomp$(O) : vmsish.h
regcomp$(O) : util.h
regexec$(O) : EXTERN.h
regexec$(O) : av.h
regexec$(O) : config.h
regexec$(O) : cop.h
regexec$(O) : cv.h
regexec$(O) : embed.h
regexec$(O) : form.h
regexec$(O) : gv.h
regexec$(O) : handy.h
regexec$(O) : hv.h
regexec$(O) : mg.h
regexec$(O) : op.h
regexec$(O) : opcode.h
regexec$(O) : perl.h
regexec$(O) : pp.h
regexec$(O) : proto.h
regexec$(O) : regcomp.h
regexec$(O) : regexec.c
regexec$(O) : regexp.h
regexec$(O) : scope.h
regexec$(O) : sv.h
regexec$(O) : vmsish.h
regexec$(O) : util.h
gv$(O) : EXTERN.h
gv$(O) : av.h
gv$(O) : config.h
gv$(O) : cop.h
gv$(O) : cv.h
gv$(O) : embed.h
gv$(O) : form.h
gv$(O) : gv.c
gv$(O) : gv.h
gv$(O) : handy.h
gv$(O) : hv.h
gv$(O) : mg.h
gv$(O) : op.h
gv$(O) : opcode.h
gv$(O) : perl.h
gv$(O) : pp.h
gv$(O) : proto.h
gv$(O) : regexp.h
gv$(O) : scope.h
gv$(O) : sv.h
gv$(O) : vmsish.h
gv$(O) : util.h
sv$(O) : EXTERN.h
sv$(O) : av.h
sv$(O) : config.h
sv$(O) : cop.h
sv$(O) : cv.h
sv$(O) : embed.h
sv$(O) : form.h
sv$(O) : gv.h
sv$(O) : handy.h
sv$(O) : hv.h
sv$(O) : mg.h
sv$(O) : op.h
sv$(O) : opcode.h
sv$(O) : perl.h
sv$(O) : perly.h
sv$(O) : pp.h
sv$(O) : proto.h
sv$(O) : regexp.h
sv$(O) : scope.h
sv$(O) : sv.c
sv$(O) : sv.h
sv$(O) : vmsish.h
sv$(O) : util.h
taint$(O) : EXTERN.h
taint$(O) : av.h
taint$(O) : config.h
taint$(O) : cop.h
taint$(O) : cv.h
taint$(O) : embed.h
taint$(O) : form.h
taint$(O) : gv.h
taint$(O) : handy.h
taint$(O) : hv.h
taint$(O) : mg.h
taint$(O) : op.h
taint$(O) : opcode.h
taint$(O) : perl.h
taint$(O) : pp.h
taint$(O) : proto.h
taint$(O) : regexp.h
taint$(O) : scope.h
taint$(O) : sv.h
taint$(O) : taint.c
taint$(O) : vmsish.h
taint$(O) : util.h
toke$(O) : EXTERN.h
toke$(O) : av.h
toke$(O) : config.h
toke$(O) : cop.h
toke$(O) : cv.h
toke$(O) : embed.h
toke$(O) : form.h
toke$(O) : gv.h
toke$(O) : handy.h
toke$(O) : hv.h
toke$(O) : keywords.h
toke$(O) : mg.h
toke$(O) : op.h
toke$(O) : opcode.h
toke$(O) : perl.h
toke$(O) : perly.h
toke$(O) : pp.h
toke$(O) : proto.h
toke$(O) : regexp.h
toke$(O) : scope.h
toke$(O) : sv.h
toke$(O) : toke.c
toke$(O) : vmsish.h
toke$(O) : util.h
util$(O) : EXTERN.h
util$(O) : av.h
util$(O) : config.h
util$(O) : cop.h
util$(O) : cv.h
util$(O) : embed.h
util$(O) : form.h
util$(O) : gv.h
util$(O) : handy.h
util$(O) : hv.h
util$(O) : mg.h
util$(O) : op.h
util$(O) : opcode.h
util$(O) : perl.h
util$(O) : pp.h
util$(O) : proto.h
util$(O) : regexp.h
util$(O) : scope.h
util$(O) : sv.h
util$(O) : vmsish.h
util$(O) : util.c
util$(O) : util.h
deb$(O) : EXTERN.h
deb$(O) : av.h
deb$(O) : config.h
deb$(O) : cop.h
deb$(O) : cv.h
deb$(O) : deb.c
deb$(O) : embed.h
deb$(O) : form.h
deb$(O) : gv.h
deb$(O) : handy.h
deb$(O) : hv.h
deb$(O) : mg.h
deb$(O) : op.h
deb$(O) : opcode.h
deb$(O) : perl.h
deb$(O) : pp.h
deb$(O) : proto.h
deb$(O) : regexp.h
deb$(O) : scope.h
deb$(O) : sv.h
deb$(O) : vmsish.h
deb$(O) : util.h
run$(O) : EXTERN.h
run$(O) : av.h
run$(O) : config.h
run$(O) : cop.h
run$(O) : cv.h
run$(O) : embed.h
run$(O) : form.h
run$(O) : gv.h
run$(O) : handy.h
run$(O) : hv.h
run$(O) : mg.h
run$(O) : op.h
run$(O) : opcode.h
run$(O) : perl.h
run$(O) : pp.h
run$(O) : proto.h
run$(O) : regexp.h
run$(O) : run.c
run$(O) : scope.h
run$(O) : sv.h
run$(O) : vmsish.h
run$(O) : util.h
vms$(O) : EXTERN.h
vms$(O) : av.h
vms$(O) : config.h
vms$(O) : cop.h
vms$(O) : cv.h
vms$(O) : embed.h
vms$(O) : form.h
vms$(O) : gv.h
vms$(O) : handy.h
vms$(O) : hv.h
vms$(O) : mg.h
vms$(O) : op.h
vms$(O) : opcode.h
vms$(O) : perl.h
vms$(O) : pp.h
vms$(O) : proto.h
vms$(O) : regexp.h
vms$(O) : vms.c
vms$(O) : scope.h
vms$(O) : sv.h
vms$(O) : vmsish.h
vms$(O) : util.h
miniperlmain$(O) : INTERN.h
miniperlmain$(O) : av.h
miniperlmain$(O) : config.h
miniperlmain$(O) : cop.h
miniperlmain$(O) : cv.h
miniperlmain$(O) : embed.h
miniperlmain$(O) : form.h
miniperlmain$(O) : gv.h
miniperlmain$(O) : handy.h
miniperlmain$(O) : hv.h
miniperlmain$(O) : mg.h
miniperlmain$(O) : miniperlmain.c
miniperlmain$(O) : op.h
miniperlmain$(O) : opcode.h
miniperlmain$(O) : perl.h
miniperlmain$(O) : pp.h
miniperlmain$(O) : proto.h
miniperlmain$(O) : regexp.h
miniperlmain$(O) : scope.h
miniperlmain$(O) : sv.h
miniperlmain$(O) : vmsish.h
miniperlmain$(O) : util.h
perlmain$(O) : INTERN.h
perlmain$(O) : av.h
perlmain$(O) : config.h
perlmain$(O) : cop.h
perlmain$(O) : cv.h
perlmain$(O) : embed.h
perlmain$(O) : form.h
perlmain$(O) : gv.h
perlmain$(O) : handy.h
perlmain$(O) : hv.h
perlmain$(O) : mg.h
perlmain$(O) : op.h
perlmain$(O) : opcode.h
perlmain$(O) : perl.h
perlmain$(O) : perlmain.c
perlmain$(O) : pp.h
perlmain$(O) : proto.h
perlmain$(O) : regexp.h
perlmain$(O) : scope.h
perlmain$(O) : sv.h
perlmain$(O) : vmsish.h
perlmain$(O) : util.h

config.h : [.vms]config.vms
	Copy &< &@

vmsish.h : [.vms]vmsish.h
	Copy &< &@

vms.c : [.vms]vms.c
	Copy &< &@

$(CRTL) : $(MAKEFILE)
	@ Open/Write crtl $(CRTL)
	@ Write crtl "$(LIBS1)"
	@ Write crtl "$(LIBS2)"
	@ Close crtl


cleanlis :
      - If F$Search("*.Lis").nes."" Then Delete/NoConfirm/Log *.Lis;*
      - If F$Search("*.Map").nes."" Then Delete/NoConfirm/Log *.Map;*

tidy : cleanlis
      - If F$Search("CRTL.Opt;-1").nes."" Then Purge/NoConfirm/Log CRTL.Opt
      - If F$Search("*$(O);-1").nes."" Then Purge/NoConfirm/Log *$(O)
      - If F$Search("*$(E);-1").nes."" Then Purge/NoConfirm/Log *$(E)
      - If F$Search("Config.H;-1").nes."" Then Purge/NoConfirm/Log Config.H
      - If F$Search("Config.SH;-1").nes."" Then Purge/NoConfirm/Log Config.SH
      - If F$Search("VMSish.H;-1").nes."" Then Purge/NoConfirm/Log VMSish.H
      - If F$Search("VMS.C;-1")   .nes."" Then Purge/NoConfirm/Log VMS.C
      - If F$Search("Perlmain.C;-1")   .nes."" Then Purge/NoConfirm/Log Perlmain.C
      - If F$Search("[.Ext.DynaLoader]DL_VMS$(O);-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS$(O)
      - If F$Search("[.Ext.DynaLoader]DL_VMS.C;-1").nes."" Then Purge/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C

clean : tidy
      - If F$Search("CRTL.Opt").nes."" Then Delete/NoConfirm/Log CRTL.Opt;*
      - If F$Search("*$(O);*") .nes."" Then Delete/NoConfirm/Log *$(O);*
      - If F$Search("Config.H").nes."" Then Delete/NoConfirm/Log Config.H;*
      - If F$Search("Config.SH").nes."" Then Delete/NoConfirm/Log Config.SH;*
      - If F$Search("VMSish.H").nes."" Then Delete/NoConfirm/Log VMSish.H;*
      - If F$Search("VMS.C")   .nes."" Then Delete/NoConfirm/Log VMS.C;*
      - If F$Search("Perlmain.C")   .nes."" Then Delete/NoConfirm/Log Perlmain.C;*
      - If F$Search("[.Ext.DynaLoader]DL_VMS$(O)").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DL_VMS$(O);*
      - If F$Search("[.Ext.DynaLoader]DL_VMS.C").nes."" Then Delete/NoConfirm/Log [.Ext.DynaLoader]DL_VMS.C;*

cleansrc : clean
      - If F$Search("*.C;-1").nes."" Then Purge/NoConfirm/Log *.C
      - If F$Search("*.H;-1").nes."" Then Purge/NoConfirm/Log *.H
      - If F$Search("*.VMS;-1").nes."" Then Purge/NoConfirm/Log *.H
      - If F$Search("$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log $(MAKEFILE)
      - If F$Search("[.VMS]$(MAKEFILE);-1").nes."" Then Purge/NoConfirm/Log [.VMS]$(MAKEFILE)

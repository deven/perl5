Perl5 interface to Berkeley DB 
==============================

Consider this a prototype user manual ... with the emphasis on the word
prototype.

First a bit of background on the format of the interface to DB.  For
those of you who don't know, DB implements 3 different 'database'
types, namely HASH, BTREE and RECNO. HASH is the direct equivalent of
the perl associative array. BTREE implements a sorted binary tree.
RECNO allows flat text files to be manipulated.

Here is the C interface to DB for opening/creating a 'database'.

  DB*
  dbopen (const char * file, int flags, int mode, 
          DBTYPE type, const void * openinfo) 

The parameter DBTYPE is an enumeration which specifies which of the 3
interface methods is to be used. Depending on which of these is
actually chosen, the final parameter, 'openinfo' points to a data
structure which allows tailoring of the specific interface method. For
example cache sizes can be changed.

here is the perl equivalent of dbopen

    $X = tie %array, DB_File, name, flags=O_RDWR, mode=0640, type=DB_HASH

As you can see I don't have the equivalent of the openinfo parameter.
In fact I have combined the type and openinfo parameters into a single
type parameter. This is done by requiring the 'type' parameter to be
one of three possible types, either DB_File::HASHINFO,
DB_File::BTREEINFO or DB_File::RECNOINFO. These types also implement
the access to the data structure expected by each of the three
interfaces. The file DB_File.pm includes an instance of each of these
data types, namely $DB_HASH, $DB_BTREE and $DB_RECNO.

Part of my goal is to provide a perl interface which will provide at
least the functionality of the complete C interface.  To that end I
have provided access to the standard Berkeley DB API functions.  If you
think that it is/is not appropriate have this functionality in a tie
module then I would be interested in hearing your comments.

Here is a list of the DB API functions in their Perl incarnation

    $status = $X->close
    $status = $X->del($key [, $flags])
    $status = $X->fd
    $status = $X->get($key [, $flags])
    $status = $X->put($key, $value, [, $flags])
    $status = $X->seq($key, $value, [, $flags])
    $status = $X->sync([$flags])

As can be seen, these can be accessed via the reference that the 'tie'
returns.

It shoud be noted that the Perl interface mirrors the standard DB
interface as much as possible, so API functions which return values
through the parameter list do exactly the same with the Perl interface
- get, put and seq are the functions to watch out for. For more details
check the DB man page.

I have also (foolishly?) anticipated the extension of the tie
functionality to allow access to equivalents of push/pop/shift/unshift
etc.  These may get dropped/expanded or renamed in a future version of
DB_File, depending on the direction the tie interface goes, so don't
assume anything about them for the moment.

Here is a complete list of what I have guessed.

    $value = $X->pop ;
    $X->push(list...) ;
    $X->unshift(list ...) ;
    $value = $X->shift ;
    $len = $X->length ;

Other Notes
-----------

  * To use DB equivalent of an in-memory file use 'undef' in place of the 
    filename.

  * DB RECNO uses record numbers which start at 1, wheras I start at 0.


Examples
========

Interface for DB_File for HASH & BTREE

    use DB_File ; 
    use POSIX 'fcntl_h' ;

    $DB_HASH->{cachesize} = 10000 ;

    # 
    $X = tie (%hash, DB_File, "filename", O_RDWR, 0640, $DB_HASH ;

    # Add a key/value pair to the file
    $h{"apple"} = "orange" ;
 
    # Check for existance of a key
    print "Exists\n" if $h{"bananna"} ;
 
    # Delete
    delete $H{"apple"} ;

    # add key/value pair if not already there
    $stat = $X->put ($key, $value, R_NOOVERWRITE) ;
    print "Cannot put $key - already there\n" if $stat == 1 ;

    $X->sync ;

    undef $X ; # Important: $X MUST be undefined before the untie
    untie %hash ;


Interface for RECNO

    use DB_File ; 
    use POSIX 'fcntl_h' ;

    tie @array, DB_File, filename ,O_RDWR ,0640,$DB_RECNO

    # Add a key/value pair to the file
    $h[0] = "orange" ;
 
    # Check for existance of a key
    print "Exists\n" if $h[1] ;

    untie @array ;
    

Known Problems
--------------

1. I have not tested all the flag combinations yet.

2. The DB RECNO interface does not work fully yet. I think this is a
   bug with DB

If you find any problems, or can suggest any improvements drop me 
a line at pmarquess@bfsec.bt.co.uk

#!../perl

# The beginning of the url for the anchors to the other sections.
chop($wd=`pwd`);
$type="<A HREF=\"file://localhost".$wd."/";
$debug=0;
$/ = "";


$indent=0;
opendir(DIR,".");
@pods=grep(/pod$/,readdir(DIR));
closedir(DIR);
foreach $pod (@pods){
    open(POD,"<$pod");
    $pod=~s/\.pod$//;
    $pods{$pod}=1;
    while(<POD>){
	s/B<([^<>]*)>/$1/g;         # bold
	s/I<([^<>]*)>/$1/g;         # bold
        if (s/^=//) {
	    s/\n$//s;
	    s/\n/ /g;
	    ($cmd, $_) = split(' ', $_, 2);
 	    if ($cmd eq  "item") {
		($what,$rest)=split(' ', $_, 2);
		next if defined $items{$what};
		$what=~s/\s*$//;
		$items{$what} = $pod."_".$i++;
	    }
	    elsif($cmd =~ /^head/){
		next if defined $headers{$_};
		$_=~s/\s*$//;
		$headers{$_} = $pod.'_'.$i++;
	    }
	}
    }
}

opendir(DIR,".");
@pods=grep(/pod$/,readdir(DIR));
closedir(DIR);
foreach $pod (@pods){
    open(POD,"<$pod") || die "cant open $pod";
    $pod=~s/\.pod$//;
    open(HTML,">$pod.html");
    print HTML "<!-- \$RCSfile\$\$Revision\$\$Date\$ -->\n";
    print HTML "<!-- \$Log\$ -->\n";
    print HTML "<HTML>\n";
    print HTML "<TITLE> \U$pod\E </TITLE>\n";
    while (<POD>) {
	chop;
	length || (print "\n") && next;
	# Translate verabatim paragraph

	if (/^\s/) {
	    $unordered=0;
	    @lines = split(/\n/);
	    if($lines[0]=~/^\s+(\w*)\t(.*)/){  # listing
		($key,$rest)=($1,$2);
		if(defined($pods{$key})){
		    print HTML "\n<ul>\n";
		    $unordered = 1;
		}
		else{
		    print HTML  "\n<listing>\n";
		}
		for(@lines){
		    /^\s+(\w*)\t(.*)/ && (($key,$rest)=($1,$2));
		    if(defined($pods{$key})){
	    		print HTML  "<li>$type$key.html\">$key<\/A>\t$rest\n"; 
		    }
		    else{
			print HTML "$_";
			print HTML "\n";
		    }
		}
		if($unordered){
		    print HTML "</ul>\n";
		}
		else{
		    print HTML "</listing>\n";
		}
		next;
	    }else{                 # preformatted text
		print HTML "<pre>\n";
		for(@lines){
		    &pre_escapes;
		    &post_escapes;
		    print HTML ' ' x 5;
		    print HTML  $_,"\n";
	        }
            print  HTML "</pre>\n";
            next;
	    }
	}
	&pre_escapes;
	s/S<([^<>]*)>/$1/g;              # embedded special
#	s/I<([^<>]*)>/<I>$1<\/I>/g;         # italic
	$_ = &Do_refs($_,$pod);
	s/Z<>/<p>/g; # ?
	&post_escapes;
	if (s/^=//) {
	    s/\n$//s;
	    s/\n/ /g;
	    ($cmd, $_) = split(' ', $_, 2);
	    if ($cmd eq 'head1') {
		print HTML  qq{<h2>$_</h2>\n};
	    }
	    elsif ($cmd eq 'head2') {
		print  HTML qq{<h3>$_</h3>\n};
	    }
	    elsif ($cmd eq 'over') {
		push(@indent,$indent);
		$indent = $_ + 0;
		print HTML  qq{\n<dl>\n};
	    }
	    elsif ($cmd eq 'back') {
		$indent = pop(@indent);
		warn "Unmatched =back\n" unless defined $indent;
		$needspace = 1;
		print HTML qq{\n</dl>\n\n};
	    }
	    elsif ($cmd eq 'item') {
		($what,$rest)=split(' ', $_, 2);
		$what=~s/\s*$//;
	        print HTML  "\n<A NAME=\"".$items{$what}."\"></A>\n";
		print  HTML qq{<dt><B>$_</B> </dt>\n};
		$next_para=1;
	    }
	    else {
		warn "Unrecognized directive: $cmd\n";
	    }
	}
	else {
	    length || next;
	    $next_para && (print HTML  qq{<dd>\n});
	    print HTML  "$_<p>";
	    $next_para && (print  HTML qq{</dd>\n<p>\n}) && ($next_para=0);
	}
    }
}
print HTML "\n</HTML>\n";

#########################################################################

sub pre_escapes {
    s/\&/\&amp\;/g;
    s/<</\&lt\;\&lt\;/g;
    s/([^SIBLC])</$1\&lt\;/g;
}

sub post_escapes{
    s/>>/\&gt\;\&gt\;/g;
    s/([^"AIB])>/$1\&gt\;/g;
}

sub Do_refs{
local($para,$pod)=@_;
foreach $char ("L","C","I","B"){
    next unless /($char<[^<>]*>)/;
    local(@ar) = split(/($char<[^<>]*>)/,$para);
    local($this,$key,$num);
    for($this=0;$this<=$#ar;$this++){
        next unless $ar[$this] =~ /${char}<([^<>]*)>/;
	$key=$1;

	if((defined($pods{$key})) && ($char eq "L")){
	    $ar[$this] = "\n$type$key.html\">\nthe $key manpage<\/A>\n"; # 
	}
	elsif(defined($items{$key})){
	    ($pod2,$num)=split(/_/,$items{$key},2);
	    if($pod2 eq $pod){
	        defined($items{$key}) && 
		($ar[$this - 1] =~ /=item\s*$/) &&
		($ar[$this] = "\n<A NAME=\"".$items{$key}."\">\n$key</A>\n");
	    }
	    else{
		$ar[$this] = "\n$type$pod2.html\#".$items{$key}."\">$key<\/A>\n";
	    }
        }
	elsif(defined($headers{$key})){
	    ($pod2,$num)=split(/_/,$headers{$key},2);
	    if($pod2 eq $pod){
	        defined($headers{$key})  && 
		($ar[$this - 1] =~ /=head([1-2])\s*$/) &&
		( $ar[$this] = "\n<A NAME=\"".$headers{$key}."\">\n$key</A>\n");
	    }
	    else{
		$ar[$this] = "\n$type$pod2.html\#".$headers{$key}."\">$key<\/A>\n";
            }
	}
	else{
	    (warn "Undefined $char<> reference, $ar[$this]\n") if $debug;
	    if(($char eq "B") || ($char eq "C")){
		$ar[$this]="<B>$key</B>";
	    }
	    elsif($char eq "L"){
		$ar[$this]=$key;
	    }
	    elsif($char eq "I"){
		$ar[$this]="<I>$key</I>";
	    }
	}
    }
    $para=join('',@ar);
}
$para;
}
